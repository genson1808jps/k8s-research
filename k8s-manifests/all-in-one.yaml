# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: k8s-demo
  labels:
    name: k8s-demo
    environment: demo
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
data:
  PORT: "8080"
  ENVIRONMENT: "kubernetes"
  DATABASE_URL: "postgres://postgres:5432/demo"
  LOG_LEVEL: "info"
  FEATURE_FLAGS: |
    {
      "new_ui": true,
      "beta_features": false,
      "analytics": true
    }
---
# Secret
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
type: Opaque
data:
  # API_SECRET: "super-secret-key-123" (base64 encoded)
  API_SECRET: c3VwZXItc2VjcmV0LWtleS0xMjM=
  # DATABASE_PASSWORD: "secure-password" (base64 encoded)  
  DATABASE_PASSWORD: c2VjdXJlLXBhc3N3b3Jk
  # JWT_SECRET: "jwt-signing-key" (base64 encoded)
  JWT_SECRET: and0LXNpZ25pbmcta2V5
---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-demo-app-sa
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
---
# Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-demo-app-role
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-demo-app-rolebinding
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
subjects:
- kind: ServiceAccount
  name: k8s-demo-app-sa
  namespace: k8s-demo
roleRef:
  kind: Role
  name: k8s-demo-app-role
  apiGroup: rbac.authorization.k8s.io
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-demo-app
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: k8s-demo-app
  template:
    metadata:
      labels:
        app: k8s-demo-app
        version: v1
    spec:
      serviceAccountName: k8s-demo-app-sa
      containers:
      - name: app
        image: k8s-demo-app:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: APP_VERSION
          value: "v1.0.0"
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
---
# ClusterIP Service
apiVersion: v1
kind: Service
metadata:
  name: k8s-demo-app-service
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: k8s-demo-app
---
# NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: k8s-demo-app-nodeport
  namespace: k8s-demo
  labels:
    app: k8s-demo-app
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
    nodePort: 30080
  selector:
    app: k8s-demo-app 